// <auto-generated />
using System;
using Datos.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Datos.Migrations
{
    [DbContext(typeof(ContextoGeneral))]
    [Migration("20201128020724_papaya")]
    partial class papaya
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Datos.Entity.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("NumeroTelefono")
                        .HasColumnType("text");

                    b.Property<string>("Passwd")
                        .HasColumnType("text");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("TipoCuenta")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("Datos.Entity.CuentaGoogle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId")
                        .IsUnique();

                    b.ToTable("CuentaGoogle");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.EncuestaGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncuestaGeneral");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.OpcionesGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PreguntaGeneralId")
                        .HasColumnType("integer");

                    b.Property<string>("Respuesta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaGeneralId");

                    b.ToTable("OpcionesGeneral");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.PreguntasGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EncuestaGeneralId")
                        .HasColumnType("integer");

                    b.Property<string>("Frase")
                        .HasColumnType("text");

                    b.Property<string>("TipoCheck")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaGeneralId");

                    b.ToTable("PreguntasGeneral");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.RespuestasGeneral", b =>
                {
                    b.Property<int>("OpcionId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.HasKey("OpcionId", "CuentaId");

                    b.HasIndex("CuentaId");

                    b.ToTable("RespuestasGeneral");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Passwd")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Usuario");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorFacultad", b =>
                {
                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultadId")
                        .HasColumnType("integer");

                    b.HasKey("AdministradorId");

                    b.HasIndex("FacultadId");

                    b.ToTable("AdministradorFacultad");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorUdelar", b =>
                {
                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.HasKey("AdministradorId");

                    b.ToTable("AdministradorUdelar");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Comunicado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Texto")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.ToTable("Comunicado");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.ComunicadoFacultad", b =>
                {
                    b.Property<int>("ComunicadoId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultadId")
                        .HasColumnType("integer");

                    b.HasKey("ComunicadoId", "FacultadId");

                    b.HasIndex("FacultadId");

                    b.ToTable("ComunicadoFacultad");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Facultad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abreviatura")
                        .HasColumnType("text");

                    b.Property<string>("ColorNav")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("NombreBD")
                        .HasColumnType("text");

                    b.Property<string>("TipoAutenticacion")
                        .HasColumnType("text");

                    b.Property<string>("TipoNav")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Url", "Abreviatura", "Nombre")
                        .IsUnique();

                    b.ToTable("Facultad");
                });

            modelBuilder.Entity("Datos.Entity.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<int>("Ci")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Datos.Entity.Cuenta", b =>
                {
                    b.HasOne("Datos.Entity.Persona", "PersonaCuenta")
                        .WithMany("Cuentas")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.CuentaGoogle", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "CuentaPersona")
                        .WithOne("CuentaGoogle")
                        .HasForeignKey("Datos.Entity.CuentaGoogle", "CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.OpcionesGeneral", b =>
                {
                    b.HasOne("Datos.Entity.EncuestaGeneralEntity.PreguntasGeneral", "PreguntaGeneral")
                        .WithMany("Opciones")
                        .HasForeignKey("PreguntaGeneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.PreguntasGeneral", b =>
                {
                    b.HasOne("Datos.Entity.EncuestaGeneralEntity.EncuestaGeneral", "EncuestaGeneral")
                        .WithMany("Preguntas")
                        .HasForeignKey("EncuestaGeneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaGeneralEntity.RespuestasGeneral", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EncuestaGeneralEntity.OpcionesGeneral", "Opcion")
                        .WithMany()
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorFacultad", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Administrador", "Administrador")
                        .WithOne("AdminFacultad")
                        .HasForeignKey("Datos.Entity.GlobalesEntity.AdministradorFacultad", "AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.GlobalesEntity.Facultad", "FacultadAdministrador")
                        .WithMany()
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorUdelar", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Administrador", "Administrador")
                        .WithOne("AdminUdelar")
                        .HasForeignKey("Datos.Entity.GlobalesEntity.AdministradorUdelar", "AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Comunicado", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Administrador", "AdminPublicador")
                        .WithMany("Comunicados")
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.ComunicadoFacultad", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Comunicado", "Comunicado")
                        .WithMany("ComunicadoFacultad")
                        .HasForeignKey("ComunicadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.GlobalesEntity.Facultad", "Facultad")
                        .WithMany("ComunicadoFacultad")
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

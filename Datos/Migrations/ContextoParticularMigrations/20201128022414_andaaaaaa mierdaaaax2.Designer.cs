// <auto-generated />
using System;
using Datos.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Datos.Migrations.ContextoParticularMigrations
{
    [DbContext(typeof(ContextoParticular))]
    [Migration("20201128022414_andaaaaaa mierdaaaax2")]
    partial class andaaaaaamierdaaaax2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fing")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Datos.Entity.ArchivoEvaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Archivo")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("ArchivoEvaluaciones");
                });

            modelBuilder.Entity("Datos.Entity.Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClaseId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClaseId");

                    b.HasIndex("CuentaId");

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("Datos.Entity.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("Datos.Entity.Clase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaClase")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Clases");
                });

            modelBuilder.Entity("Datos.Entity.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ComentarioId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<int>("DiscusionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ForoId")
                        .HasColumnType("integer");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComentarioId");

                    b.HasIndex("CuentaId");

                    b.HasIndex("DiscusionId");

                    b.HasIndex("ForoId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Datos.Entity.ComunicadoCurso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Texto")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("ComunicadoCurso");
                });

            modelBuilder.Entity("Datos.Entity.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroTelefono")
                        .HasColumnType("text");

                    b.Property<string>("Passwd")
                        .HasColumnType("text");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("TipoCuenta")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Usuario", "Email");

                    b.HasIndex("PersonaId");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("Datos.Entity.CuentaGoogle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId")
                        .IsUnique();

                    b.ToTable("CuentaGoogle");
                });

            modelBuilder.Entity("Datos.Entity.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaveMatriculacion")
                        .HasColumnType("text");

                    b.Property<int>("Creditos")
                        .HasColumnType("integer");

                    b.Property<string>("DictaCurso")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaLimiteInscripcion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Informacion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<int>("NotaMaximaAprobacion")
                        .HasColumnType("integer");

                    b.Property<int?>("NotaMaximaExamen")
                        .HasColumnType("integer");

                    b.Property<int>("NotaMinimaAprobacion")
                        .HasColumnType("integer");

                    b.Property<int?>("NotaMinimaExamen")
                        .HasColumnType("integer");

                    b.Property<string>("TipoCurso")
                        .HasColumnType("text");

                    b.Property<int>("YearDiactado")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("Datos.Entity.Discusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ForoId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("ForoId");

                    b.ToTable("Discusiones");
                });

            modelBuilder.Entity("Datos.Entity.DocentesCurso", b =>
                {
                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<int>("DocenteId")
                        .HasColumnType("integer");

                    b.Property<bool>("Escargado")
                        .HasColumnType("boolean");

                    b.HasKey("CursoId", "DocenteId");

                    b.HasIndex("DocenteId");

                    b.ToTable("DocentesCurso");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Encuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TipoEncuesta")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Encuesta");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.EncuestaCurso", b =>
                {
                    b.Property<int>("SeccionTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("EncuestaId")
                        .HasColumnType("integer");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.HasKey("SeccionTemplateId", "EncuestaId");

                    b.HasIndex("CursoId");

                    b.HasIndex("EncuestaId")
                        .IsUnique();

                    b.ToTable("EncuestaCurso");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.EncuestaFacultad", b =>
                {
                    b.Property<int>("SeccionTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("EncuestaId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultadId")
                        .HasColumnType("integer");

                    b.HasKey("SeccionTemplateId", "EncuestaId");

                    b.HasIndex("EncuestaId")
                        .IsUnique();

                    b.HasIndex("FacultadId");

                    b.ToTable("EncuestaFacultades");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Opciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PreguntaId")
                        .HasColumnType("integer");

                    b.Property<string>("Respuesta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.ToTable("Opciones");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Preguntas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EncuestaId")
                        .HasColumnType("integer");

                    b.Property<string>("Frase")
                        .HasColumnType("text");

                    b.Property<string>("TipoCheck")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Respuestas", b =>
                {
                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<int>("OpcionId")
                        .HasColumnType("integer");

                    b.HasKey("CuentaId", "OpcionId");

                    b.HasIndex("OpcionId");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EstadoCalificacion")
                        .HasColumnType("text");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCorregida")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaPublicada")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Nota")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Desarrollo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("integer");

                    b.Property<string>("Pregunta")
                        .HasColumnType("text");

                    b.Property<int>("PuntajeAprobacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("Desarrollo");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Evaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CalificacionAprobacion")
                        .HasColumnType("integer");

                    b.Property<bool>("EsArchivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SeccionTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("TipoEvaluacion")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.Property<bool>("ValidacionBedelia")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SeccionTemplateId");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Opcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Correcta")
                        .HasColumnType("boolean");

                    b.Property<string>("Frase")
                        .HasColumnType("text");

                    b.Property<int>("VerdaderoFalsoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VerdaderoFalsoId");

                    b.ToTable("OpcionesVoF");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.RespuestaDesarrollo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DesarrolloId")
                        .HasColumnType("integer");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("integer");

                    b.Property<int>("Puntaje")
                        .HasColumnType("integer");

                    b.Property<string>("Respuesta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesarrolloId");

                    b.HasIndex("EstudianteId");

                    b.ToTable("RespuestaDesarrollo");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.RespuestaVoF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Eleccion")
                        .HasColumnType("boolean");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("integer");

                    b.Property<int>("OpcionId")
                        .HasColumnType("integer");

                    b.Property<int>("VerdaderoFalsoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("OpcionId");

                    b.HasIndex("VerdaderoFalsoId");

                    b.ToTable("RespuestaVoF");
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.VerdaderoFalso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("integer");

                    b.Property<string>("Frase")
                        .HasColumnType("text");

                    b.Property<bool>("MultipleOpcion")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("VerdaderoFalso");
                });

            modelBuilder.Entity("Datos.Entity.Foro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeccionTemplateId")
                        .HasColumnType("integer");

                    b.Property<bool>("Suscripcion")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SeccionTemplateId");

                    b.ToTable("Foros");
                });

            modelBuilder.Entity("Datos.Entity.GeneralTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("TipoTemplate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeneralTemplate");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Passwd")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorFacultad", b =>
                {
                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultadId")
                        .HasColumnType("integer");

                    b.HasKey("AdministradorId");

                    b.HasIndex("FacultadId");

                    b.ToTable("AdministradorFacultad");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorUdelar", b =>
                {
                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.HasKey("AdministradorId");

                    b.ToTable("AdministradorUdelar");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Comunicado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdministradorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Texto")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.ToTable("Comunicado");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.ComunicadoFacultad", b =>
                {
                    b.Property<int>("ComunicadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ComunicadoId1")
                        .HasColumnType("integer");

                    b.Property<int>("FacultadId")
                        .HasColumnType("integer");

                    b.HasKey("ComunicadoId");

                    b.HasIndex("ComunicadoId1");

                    b.HasIndex("FacultadId");

                    b.ToTable("ComunicadoFacultad");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Facultad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abreviatura")
                        .HasColumnType("text");

                    b.Property<string>("ColorNav")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("NombreBD")
                        .HasColumnType("text");

                    b.Property<string>("TipoAutenticacion")
                        .HasColumnType("text");

                    b.Property<string>("TipoNav")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facultad");
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FechaCreada")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Datos.Entity.Informacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SeccionTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeccionTemplateId");

                    b.ToTable("Informacion");
                });

            modelBuilder.Entity("Datos.Entity.Inscripcion", b =>
                {
                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<int>("EsudianteInscripcionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("HabilitadoBedelia")
                        .HasColumnType("boolean");

                    b.Property<bool>("Metriculado")
                        .HasColumnType("boolean");

                    b.HasKey("CursoId", "EsudianteInscripcionId");

                    b.HasIndex("EsudianteInscripcionId");

                    b.ToTable("Inscripcion");
                });

            modelBuilder.Entity("Datos.Entity.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<int>("SeccionId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeccionId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Datos.Entity.ModuloDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<int>("Prioridad")
                        .HasColumnType("integer");

                    b.Property<int?>("TamplateId")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TamplateId");

                    b.ToTable("ModuloDefault");
                });

            modelBuilder.Entity("Datos.Entity.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<int>("Ci")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Ci");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Datos.Entity.SeccionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<int>("Prioridad")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("SeccionTemplate");
                });

            modelBuilder.Entity("Datos.Entity.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CuentaId")
                        .HasColumnType("integer");

                    b.Property<int>("ForoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("ForoId");

                    b.ToTable("Suscripciones");
                });

            modelBuilder.Entity("Datos.Entity.ArchivoEvaluacion", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EvaluacionEntity.Evaluacion", "Evaluacion")
                        .WithMany()
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Asistencia", b =>
                {
                    b.HasOne("Datos.Entity.Clase", "Clase")
                        .WithMany()
                        .HasForeignKey("ClaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Calendario", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Clase", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Comentario", b =>
                {
                    b.HasOne("Datos.Entity.Comentario", null)
                        .WithMany("Comentarios")
                        .HasForeignKey("ComentarioId");

                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Discusion", "Discusion")
                        .WithMany("Comentarios")
                        .HasForeignKey("DiscusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Foro", "Foro")
                        .WithMany()
                        .HasForeignKey("ForoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.ComunicadoCurso", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "ComunicadoAlCurso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Cuenta", b =>
                {
                    b.HasOne("Datos.Entity.Persona", "PersonaCuenta")
                        .WithMany("Cuentas")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.CuentaGoogle", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "CuentaPersona")
                        .WithOne("CuentaGoogle")
                        .HasForeignKey("Datos.Entity.CuentaGoogle", "CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Discusion", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Foro", "Foro")
                        .WithMany("Discusiones")
                        .HasForeignKey("ForoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.DocentesCurso", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Cuenta", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.EncuestaCurso", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EncuestaEntity.Encuesta", "Encuesta")
                        .WithOne("EncuestaCurso")
                        .HasForeignKey("Datos.Entity.EncuestaEntity.EncuestaCurso", "EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.SeccionTemplate", "SeccionTemplate")
                        .WithMany("EncuestaCursos")
                        .HasForeignKey("SeccionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.EncuestaFacultad", b =>
                {
                    b.HasOne("Datos.Entity.EncuestaEntity.Encuesta", "Encuesta")
                        .WithOne("EncuestaFacultad")
                        .HasForeignKey("Datos.Entity.EncuestaEntity.EncuestaFacultad", "EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.GlobalesEntity.Facultad", "Facultad")
                        .WithMany()
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.SeccionTemplate", "SeccionTemplate")
                        .WithMany()
                        .HasForeignKey("SeccionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Opciones", b =>
                {
                    b.HasOne("Datos.Entity.EncuestaEntity.Preguntas", "Pregunta")
                        .WithMany("Opciones")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Preguntas", b =>
                {
                    b.HasOne("Datos.Entity.EncuestaEntity.Encuesta", "Encuesta")
                        .WithMany("Preguntas")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EncuestaEntity.Respuestas", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EncuestaEntity.Opciones", "Opcion")
                        .WithMany()
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Calificacion", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Estudiante")
                        .WithMany()
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EvaluacionEntity.Evaluacion", "Evaluacion")
                        .WithMany("Calificaciones")
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Desarrollo", b =>
                {
                    b.HasOne("Datos.Entity.EvaluacionEntity.Evaluacion", "Evaluacion")
                        .WithMany("Desarrollo")
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Evaluacion", b =>
                {
                    b.HasOne("Datos.Entity.SeccionTemplate", "SeccionTemplate")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("SeccionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.Opcion", b =>
                {
                    b.HasOne("Datos.Entity.EvaluacionEntity.VerdaderoFalso", "VerdaderoFalso")
                        .WithMany("OpcionesVoF")
                        .HasForeignKey("VerdaderoFalsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.RespuestaDesarrollo", b =>
                {
                    b.HasOne("Datos.Entity.EvaluacionEntity.Desarrollo", "Desarrollo")
                        .WithMany("Respuestas")
                        .HasForeignKey("DesarrolloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Cuenta", "Estudiante")
                        .WithMany()
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.RespuestaVoF", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Estudiante")
                        .WithMany()
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EvaluacionEntity.Opcion", "Opcion")
                        .WithMany()
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.EvaluacionEntity.VerdaderoFalso", "VerdaderoFalso")
                        .WithMany("Respuestas")
                        .HasForeignKey("VerdaderoFalsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.EvaluacionEntity.VerdaderoFalso", b =>
                {
                    b.HasOne("Datos.Entity.EvaluacionEntity.Evaluacion", "Evaluacion")
                        .WithMany("VerdaderoFalso")
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Foro", b =>
                {
                    b.HasOne("Datos.Entity.SeccionTemplate", "Seccion")
                        .WithMany("Foros")
                        .HasForeignKey("SeccionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorFacultad", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Administrador", "Administrador")
                        .WithOne("AdminFacultad")
                        .HasForeignKey("Datos.Entity.GlobalesEntity.AdministradorFacultad", "AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.GlobalesEntity.Facultad", "FacultadAdministrador")
                        .WithMany()
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.AdministradorUdelar", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Administrador", "Administrador")
                        .WithOne("AdminUdelar")
                        .HasForeignKey("Datos.Entity.GlobalesEntity.AdministradorUdelar", "AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Comunicado", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Administrador", "AdminPublicador")
                        .WithMany("Comunicados")
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.ComunicadoFacultad", b =>
                {
                    b.HasOne("Datos.Entity.GlobalesEntity.Comunicado", "Comunicado")
                        .WithMany("ComunicadoFacultad")
                        .HasForeignKey("ComunicadoId1");

                    b.HasOne("Datos.Entity.GlobalesEntity.Facultad", "Facultad")
                        .WithMany("ComunicadoFacultad")
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.GlobalesEntity.Notificacion", b =>
                {
                    b.HasOne("Datos.Entity.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Informacion", b =>
                {
                    b.HasOne("Datos.Entity.SeccionTemplate", "SeccionTemplate")
                        .WithMany("Informaciones")
                        .HasForeignKey("SeccionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Inscripcion", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "CursoInscripcion")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Cuenta", "EsudianteInscripcion")
                        .WithMany()
                        .HasForeignKey("EsudianteInscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Material", b =>
                {
                    b.HasOne("Datos.Entity.SeccionTemplate", "Seccion")
                        .WithMany("Materiales")
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.ModuloDefault", b =>
                {
                    b.HasOne("Datos.Entity.GeneralTemplate", "Tamplate")
                        .WithMany("Modulos")
                        .HasForeignKey("TamplateId");
                });

            modelBuilder.Entity("Datos.Entity.SeccionTemplate", b =>
                {
                    b.HasOne("Datos.Entity.Curso", "Curso")
                        .WithMany("Secciones")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Entity.Suscripcion", b =>
                {
                    b.HasOne("Datos.Entity.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entity.Foro", "Foro")
                        .WithMany()
                        .HasForeignKey("ForoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
